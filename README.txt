Read me

#################################################################
General Information

 - Program language: Python
   * Python Library: tika, json, google.colab, pandas,  gpt_2_simple, datetime, os, spacy, matplotlib, datetime

 - External resource: github link from Ben Gumser, Google Colab TPU setup codes provided by Yifeng (Carl) Shi on slack

#################################################################

MIMECRAFT_HW2.ipynb (run this in google colab)
  1. Execute TTR method from Tika output.
    a. From XHTML string parsed from tika, extract name of the sender, the title, and the body of the email to generate our form of Email Text. 
  2. Generate input for GPT-2.
    a. Initial 800 emails: 
      - Training input for initial 800 emails will be generated using the fraudulent emails datasets. 
      - Distribute all fraudulent emails into four different attack types.
    b. First reply emails:
      - Training input for first reply emails will be generated using Enron Email Corpus from the outside link (https://www.kaggle.com/wcukierski/enron-email-dataset).
      - Extract only reply emails from Enron Email Corpus
      - Distribute all fraudulent emails into four different attack types.
      - Organize initial 800 emails generated previously as a prefix of the first reply email. 
    c. Second reply emails:
      - Training input is same as input for first reply emails
      - Organize second reply emails generated previously as a prefix of the second reply email.
  3. Generate input for Grover training set and testing set.
    a. Generate JSONL file using fraudulent emails (labeled as a human) and GPT2 generated emails (labeled as a machine) as a training input.
    b. Generate JSONL file using 2400 new attack emails from GPT2 as a testing input.
  4. Collect all the result files from GPT2, Grover, Face Generator and Phish Iris Images to create new_attacks.tsv and featureTable_v2.tsv file.
    a. New_attacks.tsv
      - It consists of 2400 rows from GPT2 generated emails and 6 columns. 
      - AttackType_index: The value in this column shows the type of attack (Social Engineering, Malware, Reconnaissance, and Credential Phishing), index of the email and the type of email (initial, first reply, and second reply). For example “SocEng. 100-1” is the 100th GPT2 initial email of social engineering type and “SocEng. 100-2” is the 100th GPT2 first reply email of social engineering type.
      - SenderFace: The value in this column describes the file path of the sender’s face image. Same attacker(initial email and the second reply email pair) has the same path. Path in the tsv file is starting from the folder named “Face_generator-1600 result/”, but the full path should be “TEAM_MIMECRAFT_DSCI550_HW_EXTRACT/new_attacks/Face Generator/Face_generator-1600 result/”
      - PhishIrisPath: The value in this column describes the file path of the Phish Iris image. Only GPT2 initial 800 emails have the path. Path in the tsv file is starting from the folder named like “Credential_Phishing-800_result/”, but the full path should be “TEAM_MIMECRAFT_DSCI550_HW_EXTRACT/new_attacks/Phish Iris Images/Credential_Phishing-800_result/”
      - Caption: caption for the Phish Iris image is written.
      - Grover: label of the email (human vs. machine) is written.

  ** intermediate files: "intermediate files" folder contains all the intermediate result files created from each steps of this notebook.
  ** files in this folder can be used for reference when you run gpt-2 for generating fake emails.

#################################################################
GPT2 Email Generate Process
  * Use MIMECRAFT_HW2.ipynb file
  * Use input files generated by the same file.
  * You can either create a training model or bring a trained model from outside. 
  * Initial email:  
    - Use reference code from https://github.com/minimaxir/gpt-2-simple by Max Woolf
      a. Run Step 3 of MIMECRAFT_HW2.ipynb with finetune = true (if you wish to train the model) OR with finetune = false (If using existing model)
    - Link for trained model: https://drive.google.com/drive/folders/1r0i9gUOaYoVOHQOxJchXhEYZC9Fb-SZv?usp=sharing 
    - Name of the trained model: checkpoint_SocEng355M.tar, checkpoint_Malware355M.tar, checkpoint_Reconn355M.tar, checkpoint_CrePhi355M.tar
  * First reply email: 
    - Use reference code from https://github.com/bengum/gpt-2 by Ben Gumser
      a. Run Step 6 of MIMECRAFT_HW2.ipynb with finetune = true (if you wish to train the model) OR with finetune = false (If using existing model)
    - Link for trained model: https://drive.google.com/drive/folders/1r0i9gUOaYoVOHQOxJchXhEYZC9Fb-SZv?usp=sharing 
    - Name of the trained model: checkpoint_SocEngEnron355M.tar, heckpoint_MalwareEnron355M.tar, checkpoint_ReconnEnron355M.tar, checkpoint_CrePhiEnron355M.tar
  * Second reply email: 
    - Use reference code from https://github.com/bengum/gpt-2 by Ben Gumser
      a. Run Step 7 of MIMECRAFT_HW2.ipynb with finetune = true (if you wish to train the model) OR with finetune = false (If using existing model)
    - Trained models for the second reply email are same as first reply email

#################################################################
Phish Iris Image Process
  * Separate original Phish Iris image datasets into four separate folders corresponding to four attack types in order to train four separate models.
  * Use https://www.birme.net/ to pre-process the Phish Iris images. Resize and crop all images to 128x128 size, convert them to jpg format and rename them in sequence.
  * Use FaceGeneratorDCGAN.py four times with appropriate input files and parameters to generate fake Phish Iris images.
  * Output is 200 generated fake Phish Iris images per attack types, totally 800 fake Phish Iris images.

#################################################################
Face Generator Process
  * Download the Celebrities-100k training dataset from Kaggle.
  * Use FaceGeneratorDCGAN.py with appropriate input files and parameters to generate fake face images.
  * Output is 800 generated fake face images for attackers and another 800 images for victims, totally 1,600 fake face images.

#################################################################
Captioning Process: 
  * Install tika docker package, build the “Show and Tell model Image Text Captioning”.
  * Connect to the Image Captioning REST API.
  * Use caption.py in the ‘caption’ folder.
  * Four json files will be returned in the same directory as the output. (output from previous running are stored in the folder, result file)
 
#################################################################
Grover Process:
  * Set up Google cloud bucket.
  * Use the Grover training input file created by MIMECRAFT_HW2.ipynb.
  * Use Grover_training.ipynb with TPU support in training mode. Google Colab TPU setup codes provided by Yifeng (Carl) Shi on slack.
  * Output is the discriminator model saved in Google cloud bucket.
  * Use the Grover testing input file created by MIMECRAFT_HW2.ipynb and the newly trained discriminator model.
  * Use Grover_training.ipynb with TPU support in testing mode.
  * Output is the 2400_test-probs.npy file.
  * Use numpy to read the 2400_test-probs.npy file. Each email will contain a pair of numbers. The first one is the probability of machine-written and the second one is the probability of human-written.
  * Run get_flags.py to conclude the final prediction result for each email.






